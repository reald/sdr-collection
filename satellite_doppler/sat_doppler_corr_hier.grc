options:
  parameters:
    author: reald
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: hb
    hier_block_src_path: '.:'
    id: sat_doppler_corr
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Satellite Doppler Frequency Shift Correction
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: Correction frequency will be set by message
    freq: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 500.0]
    rotation: 0
    state: true
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 672.0]
    rotation: 0
    state: disabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 432.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom gnuradio import blocks\n\nimport pmt\n\nfrom orbit_predictor.sources\
      \ import EtcTLESource\nimport orbit_predictor.locations\nimport datetime\nimport\
      \ pytz\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self, samp_rate=1e6,\n          \
      \       rx_freq=145.8e6,\n                 loc_name='Nuernberg', loc_lat=49.478,\
      \ loc_lon=11.069, loc_height_m=315, \n                 tle_file='/home/real/iss.txt',\
      \ sat_name='ISS (ZARYA)',\n                 start_time='2021-01-01 00:00:00',\n\
      \                 time_zone='Europe/Berlin',\n                 print_debug=1):\n\
      \        \"\"\"arguments to this function show up as parameters in GRC\"\"\"\
      \n\n        gr.sync_block.__init__(\n            self,\n            name='Satellite\
      \ Doppler Shift Prediction',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.complex64]\n        )\n        \n        self.message_port_register_out(pmt.intern('msgfreq'))\n\
      \        \n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        \n    \
      \    # sample rate\n        self.samp_rate = samp_rate\n        \n        #\
      \ rx frequency\n        self.rx_freq = rx_freq\n        \n        # location\n\
      \        self.loc_name = loc_name\n        self.loc_lat = loc_lat\n        self.loc_lon\
      \ = loc_lon\n        self.loc_height_m = loc_height_m\n        self.location\
      \ = orbit_predictor.locations.Location(self.loc_name, self.loc_lat, self.loc_lon,\
      \ self.loc_height_m)\n        \n        # read iss tle\n        self.tle_file\
      \ = tle_file\n        self.tlesource = EtcTLESource(filename=self.tle_file)\n\
      \n        # sat predictor\n        self.sat_name = sat_name\n        print(\"\
      Satellite: \" + self.sat_name)\n        self.satpredictor = self.tlesource.get_predictor(self.sat_name)\n\
      \        \n        # destination timezone\n        try:\n           self.time_zone\
      \ = pytz.timezone(time_zone)\n        except:\n           print(\"Falling back\
      \ to UTC\")\n           self.time_zone = pytz.timezone('UTC')\n        \n  \
      \      print(\"Timezone: \" + str(self.time_zone) )\n        \n        self.time_zone_utc\
      \ = pytz.timezone('UTC')\n        \n        # start time\n        try:\n   \
      \        self.start_time = datetime.datetime.strptime(start_time, '%Y-%m-%d\
      \ %H:%M:%S')\n           self.start_time = self.time_zone.localize(self.start_time)\n\
      \        except:\n           print(\"No valid start time given. Use now()\"\
      )\n           self.start_time = datetime.datetime.now(self.time_zone)\n\n  \
      \      print(\"Start time: \" + str(self.start_time) )\n        \n        self.start_time_utc\
      \ = self.start_time.astimezone(self.time_zone_utc)\n        self.current_time_utc\
      \ = self.start_time_utc\n\n        self.print_debug = print_debug\n\n      \
      \  # other variables\n        self.num_seen_samples = 0\n        self.num_delta_samples\
      \ = 0\n        self.last_freq_corr_msg = 0\n\n\n\n    def get_sat_elev_azim(self,\
      \ sat_position):\n       \"\"\" get elevation and azimuth on our location to\
      \ sat at its position \"\"\"\n       \n       [azim, elev] = self.location.get_azimuth_elev_deg(\
      \ sat_position )\n       \n       return [elev, azim]\n\n\n\n    def get_doppler_factor(self,\
      \ sat_position):\n       \"\"\" get doppler factor \"\"\"\n       \n       return\
      \ self.location.doppler_factor( sat_position )\n\n\n\n    def get_doppler_shift(self,\
      \ sat_position, freq):\n       \"\"\" get doppler factor \"\"\"\n       \n \
      \      return round(freq - self.location.doppler_factor( sat_position ) * freq)\n\
      \n\n\n    def get_sat_distance(self, sat_position_efec):\n       \"\"\" get\
      \ distance to satellite \"\"\"\n       \n       return self.location.slant_range_km(\
      \ sat_position_efec )\n\n\n\n    def get_sat_distance_velocity(self, sat_position):\n\
      \       \"\"\" get distance to satellite \"\"\"\n       \n       return self.location.slant_range_velocity_kms(\
      \ sat_position )\n    \n\n\n    def get_is_visible(self, sat_position):\n  \
      \     \"\"\" is satellite visible from our location? \"\"\"\n       \n     \
      \  return self.location.is_visible ( sat_position )\n\n\n\n    def print_sat_info(self,\
      \ sat_pos):\n       \"\"\" print information at location of sat at position\
      \ \"\"\"\n       \n       if ( self.print_debug == 0 ):\n          return\n\
      \       \n       # elevation and azimuth of satellite at our location\n    \
      \   [elev, azim] = self.get_sat_elev_azim(sat_pos)\n       print( \"Elevation:\
      \ \" + str(elev) + \", Azimuth: \" + str(azim) )\n           \n       # doppler\
      \ factor\n       print( \"Doppler Factor: \" + str(self.get_doppler_factor(sat_pos))\
      \ )\n           \n       # doppler shift\n       print( \"Doppler Shift (@100M,\
      \ Hz): \" + str(self.get_doppler_shift(sat_pos, 100e6)) )\n       print( \"\
      Doppler Shift (@\" + str(self.rx_freq) + \", Hz): \" + str(self.get_doppler_shift(sat_pos,\
      \ self.rx_freq)) )\n\n       # distance\n       print ( \"Distance (km): \"\
      \ + str(self.get_sat_distance(sat_pos.position_ecef)) )\n           \n     \
      \  # distance velocity\n       print ( \"Slant range velocity (km/s): \" + str(self.get_sat_distance_velocity(sat_pos))\
      \ )\n           \n       # is sat visible from this location?\n       print\
      \ ( \"Sat visible from location: \" + str(self.get_is_visible(sat_pos)) )\n\n\
      \       print(\"\")\n       \n       \n\n    def work(self, input_items, output_items):\n\
      \        \"\"\" worker \"\"\"\n       \n        #print(self.num_delta_samples)\n\
      \        \n        if self.num_seen_samples == 0:\n           # first call.\
      \ calculate start time\n           \n           # get next pass\n          \
      \ #print(self.start_time_utc.tzinfo)\n           # sat predictor expects utc\
      \ time\n           predicted_pass = self.satpredictor.get_next_pass(self.location,\
      \ self.start_time_utc, max_elevation_gt = 0)\n           print(predicted_pass.aos.tzinfo)\n\
      \           print(predicted_pass.aos, predicted_pass.los, predicted_pass.duration_s,\
      \ predicted_pass.max_elevation_deg, sep=\"; \")\n           # local time\n \
      \          print(predicted_pass.aos.astimezone(self.time_zone))\n         \n\
      \           sat_pos = self.satpredictor.get_position(self.start_time_utc)\n\
      \           self.print_sat_info(sat_pos)\n\n           # send frequency correction\
      \ message\n           doppler_freq_corr = - self.get_doppler_shift(sat_pos,\
      \ self.rx_freq)\n           self.message_port_pub(pmt.intern('msgfreq'), pmt.cons(pmt.to_pmt(\"\
      freq\"), pmt.from_float(doppler_freq_corr)))\n           self.last_freq_corr_msg\
      \ = doppler_freq_corr\n         \n        elif (self.num_delta_samples > self.samp_rate):\n\
      \           # recalculate time after min 1s\n           \n           self.current_time_utc\
      \ = self.current_time_utc + datetime.timedelta( seconds = self.num_delta_samples/self.samp_rate\
      \ )\n           print( self.current_time_utc.astimezone(self.time_zone) )\n\n\
      \           sat_pos = self.satpredictor.get_position(self.current_time_utc)\n\
      \           self.print_sat_info(sat_pos)\n           \n           # send frequency\
      \ correction message\n           doppler_freq_corr = - self.get_doppler_shift(sat_pos,\
      \ self.rx_freq)\n           \n           if ( doppler_freq_corr != self.last_freq_corr_msg\
      \ ):\n              # only send if change happended\n              self.message_port_pub(pmt.intern('msgfreq'),\
      \ pmt.cons(pmt.to_pmt(\"freq\"), pmt.from_float(doppler_freq_corr)))\n     \
      \         self.last_freq_corr_msg = doppler_freq_corr\n\n           self.num_delta_samples\
      \ = 0\n\n        self.num_seen_samples += len(input_items[0])\n        self.num_delta_samples\
      \ += len(input_items[0]) \n\n        output_items[0][:] = input_items[0]\n\n\
      \        \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    loc_height_m: loc_height
    loc_lat: loc_lat
    loc_lon: loc_lon
    loc_name: loc_name
    maxoutbuf: '0'
    minoutbuf: '0'
    print_debug: print_debug
    rx_freq: rx_freq
    samp_rate: samp_rate
    sat_name: sat_name
    start_time: start_time
    time_zone: time_zone
    tle_file: tle_file
  states:
    _io_cache: ('Satellite Doppler Shift Prediction', 'blk', [('samp_rate', '1000000.0'),
      ('rx_freq', '145800000.0'), ('loc_name', "'Nuernberg'"), ('loc_lat', '49.478'),
      ('loc_lon', '11.069'), ('loc_height_m', '315'), ('tle_file', "'/home/real/iss.txt'"),
      ('sat_name', "'ISS (ZARYA)'"), ('start_time', "'2021-01-01 00:00:00'"), ('time_zone',
      "'Europe/Berlin'"), ('print_debug', '1')], [('0', 'complex', 1)], [('0', 'complex',
      1), ('msgfreq', 'message', 1)], 'Embedded Python Block example - a simple multiply
      const', ['loc_height_m', 'loc_lat', 'loc_lon', 'loc_name', 'print_debug', 'rx_freq',
      'samp_rate', 'sat_name', 'start_time', 'time_zone', 'tle_file'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 364.0]
    rotation: 0
    state: enabled
- name: loc_height
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Location Height [m]
    short_id: ''
    type: ''
    value: '315'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1080, 12.0]
    rotation: 0
    state: true
- name: loc_lat
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Location Latitude
    short_id: ''
    type: ''
    value: '49.478'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 12.0]
    rotation: 0
    state: true
- name: loc_lon
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Location Longitude
    short_id: ''
    type: ''
    value: '11.069'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 12.0]
    rotation: 0
    state: true
- name: loc_name
  id: parameter
  parameters:
    alias: ''
    comment: Receiver Location
    hide: none
    label: Location Name
    short_id: ''
    type: str
    value: '''Nuremberg'''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 12.0]
    rotation: 0
    state: true
- name: pad_sink_0
  id: pad_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: out
    num_streams: '1'
    optional: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 444.0]
    rotation: 0
    state: true
- name: pad_source_0
  id: pad_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: in
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '1'
    optional: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 444.0]
    rotation: 0
    state: true
- name: print_debug
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: part
    label: Print Debug Messages
    short_id: ''
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 12.0]
    rotation: 0
    state: true
- name: rx_freq
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Receive Frequency
    short_id: ''
    type: ''
    value: 145.8e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 12.0]
    rotation: 0
    state: true
- name: samp_rate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Sample Rate
    short_id: ''
    type: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 12.0]
    rotation: 0
    state: true
- name: sat_name
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Satellite Name
    short_id: ''
    type: str
    value: '''ISS (ZARYA)'''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 164.0]
    rotation: 0
    state: true
- name: start_time
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Start Time
    short_id: ''
    type: str
    value: '''2021-01-02 08:09:15'''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 164.0]
    rotation: 0
    state: true
- name: time_zone
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Time Zone
    short_id: ''
    type: str
    value: '''Europe/Berlin'''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 164.0]
    rotation: 0
    state: true
- name: tle_file
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Location of TLE file
    short_id: ''
    type: str
    value: /tmp/iss.txt
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 164.0]
    rotation: 0
    state: true

connections:
- [analog_sig_source_x_0_0, '0', blocks_multiply_xx_0, '1']
- [blocks_multiply_xx_0, '0', pad_sink_0, '0']
- [epy_block_0, '0', blocks_multiply_xx_0, '0']
- [epy_block_0, msgfreq, analog_sig_source_x_0_0, freq]
- [epy_block_0, msgfreq, blocks_message_debug_0, print]
- [pad_source_0, '0', epy_block_0, '0']

metadata:
  file_format: 1
